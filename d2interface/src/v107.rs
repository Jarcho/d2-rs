use crate::{
  module::Ordinal::Ordinal, Addresses, BaseAddresses, EntityKind, FixedU16, IsoPos, LinearPos, Rand,
};
use core::ptr::NonNull;

pub use crate::v100::StaticPos;

pub type EntityTables = crate::EntityTables<Entity>;
pub type EntityTable = crate::EntityTable<Entity>;
pub type GameCursor = crate::GameCursor<Entity>;

pub const ADDRESSES: Addresses = Addresses {
  player: 0x12f2a0,
  env_effects: 0x118ffc,
  game_type: 0x119260,
  entity_table: 0x12daa0,
  entity_table2: 0x12e6a0,
  client_loop_globals: 0x119050,
  // Doesn't exist in this version
  apply_pos_change: 0,
  in_perspective: Ordinal(10010),
  hwnd: Ordinal(10027),
  server_update_time: 0xed75c,
  draw_menu: Ordinal(10019),
  cursor_table: 0x108160,
  game_cursor: 0x1340d8,
  summit_cloud_x_pos: 0,
  draw_line: Ordinal(10057),
  find_closest_color: Ordinal(10034),
  viewport_width: 0x10c014,
  viewport_height: 0x10c010,
  viewport_shift: 0x11e2b4,
};
pub const BASE_ADDRESSES: BaseAddresses = BaseAddresses {
  client: 0x6fad0000,
  common: 0x6fd60000,
  game: 0x6fc60000,
  gfx: 0x6faa0000,
  win: 0x6f900000,
};

#[repr(C)]
pub struct Room {
  pub linear_x: u32,
  pub width: u32,
  pub linear_y: u32,
  pub height: u32,
  pub _padding1: [u32; 5],
  pub connected: *mut *mut Room,
  pub connected_count: u32,
  pub _padding2: [u32; 2],
  pub collision_data: u32,
  pub data: u32,
}

#[repr(C)]
pub struct DyPos {
  pub linear_pos: LinearPos<FixedU16>,
  pub iso_pos: IsoPos<i32>,
  pub target_pos: [LinearPos<u16>; 3],
  pub room: Option<NonNull<Room>>,
  pub _padding1: [u32; 4],
  pub entity: NonNull<Entity>,
}

#[repr(C)]
pub union EntityPos {
  pub s: Option<NonNull<StaticPos>>,
  pub d: Option<NonNull<DyPos>>,
}

#[repr(C)]
pub struct Entity {
  pub kind: EntityKind,
  pub class_id: u32,
  pub id: u32,
  pub _padding1: [u32; 8],
  pub rand: Rand,
  pub seed: u32,
  pub pos: EntityPos,
  pub _padding2: [u32; 10],
  pub gfx_info: u32,
  pub _padding3: [u32; 8],
  pub light: u32,
  pub light_width: u32,
  pub _padding4: [u32; 30],
  pub next_entity: Option<NonNull<Entity>>,
}
impl crate::LinkedList for Entity {
  fn next(&self) -> Option<NonNull<Self>> {
    self.next_entity
  }
}
impl Entity {
  pub fn pos<T>(
    &self,
    static_fn: impl FnOnce(&StaticPos) -> T,
    dy_fn: impl FnOnce(&DyPos) -> T,
  ) -> Option<T> {
    unsafe {
      match self.kind {
        EntityKind::Pc | EntityKind::Npc | EntityKind::Missile => {
          self.pos.d.map(|pos| dy_fn(pos.as_ref()))
        }
        EntityKind::Object | EntityKind::Item | EntityKind::Tile => {
          self.pos.s.map(|pos| static_fn(pos.as_ref()))
        }
        _ => None,
      }
    }
  }

  pub fn has_room(&self) -> bool {
    self
      .pos(|pos| pos.room.is_some(), |pos| pos.room.is_some())
      .unwrap_or(false)
  }
}

pub mod dtbl {
  pub use crate::v106b::dtbl::*;
  use crate::{
    dtbl::{
      AccByLvl3, ByComponent, ByEqComponent, ByLvl, ByNgLvl, ByNpcMode, DropSet, I32Code, Item,
      ItemCode, ItemTy, ItemTyCode, Missile, Prop, Skill, State,
    },
    ArmorTy, BodyLoc, Color, Component, CubeMod, CubeTy, ElTy, FixedI12, FixedI7, HitClass, Id16,
    Id8, NpcMode, NpcSpawnTy, Pc, Range, RgbColor, ScreenPos, ScreenRectS, Size, StorePage, StrId,
    TilePos,
  };

  #[repr(C)]
  pub struct NgLvlDef {
    pub res_penalty: i32,
    pub xp_death_penalty: i32,
    pub uber_code_odds: i32,
    pub uber_code_odds_good: i32,
    pub npc_skill_bonus: i32,
    pub npc_freeze_div: i32,
    pub npc_cold_div: i32,
    pub ai_curse_div: i32,
    pub ultra_code_odds: i32,
    pub ultra_code_odds_good: i32,
    pub life_steal_div: i32,
    pub mana_steal_div: i32,
    pub extra_unique_mon: i32,
  }

  #[repr(C)]
  pub struct DropSetDef {
    pub name: [u8; 32],
    pub picks: i32,
    pub magic: i16,
    pub rare: i16,
    pub set: i16,
    pub unique: i16,
    pub _pad0: [u8; 4],
    pub nodrop: i32,
    pub items: [[u8; 64]; 10],
    pub weights: [i32; 10],
  }

  #[repr(C)]
  pub struct ItemMod {
    pub prop: Prop,
    pub param: i32,
    pub value: Range<i32>,
  }

  #[repr(C)]
  pub struct GemDef {
    pub name: [u8; 32],
    pub letter: [u8; 6],
    pub item: Item,
    pub display_name: StrId,
    pub mod_count: u8,
    pub transform: u8,
    pub weapon_mods: [ItemMod; 3],
    pub helm_mods: [ItemMod; 3],
    pub shield_mods: [ItemMod; 3],
  }

  #[repr(C)]
  pub struct ItemRatioDef {
    pub unique: i32,
    pub unique_div: i32,
    pub rare: i32,
    pub rare_div: i32,
    pub set: i32,
    pub set_div: i32,
    pub magic: i32,
    pub magic_div: i32,
    pub hq: i32,
    pub hq_div: i32,
    pub normal: i32,
    pub normal_div: i32,
    pub version: i16,
    pub uber: u8,
    pub class_specific: u8,
  }

  #[repr(C)]
  pub struct ItemStatDef {
    pub dmg_related: u8,
    pub item_specific: u8,
    pub div: i32,
    pub mul: i32,
    pub add: i32,
    pub val_shift: u8,
    pub save_bits: u8,
    pub save_add: i32,
    pub target_stat: i32,
    pub pct: u8,
    pub per_lvl: u8,
    pub per_lvl_shift: u8,
    pub by_time: u8,
    pub encode: u8,
  }

  #[repr(C)]
  pub struct ItemTyDef {
    pub code: ItemTyCode,
    pub equiv: [Id8<ItemTy>; 2],
    pub order: u8,
    pub can_repair: u8,
    pub needs_id: u8,
    pub mods: u8,
    pub body: u8,
    pub body_loc: [BodyLoc; 2],
    pub shoots: ItemTy,
    pub quiver: ItemTy,
    pub is_throwable: u8,
    pub is_reloadable: u8,
    pub is_reequipable: u8,
    pub can_auto_stack: u8,
    pub magic: u8,
    pub rare: u8,
    pub normal: u8,
    pub is_charm: u8,
    pub is_gem: u8,
    pub is_beltable: u8,
    pub max_socks: ByLvl<u8>,
    pub is_drop_set: u8,
    pub rarity: u8,
    pub staff_mods: Pc,
    pub cost_formula: u8,
    pub class: Pc,
    pub store_page: StorePage,
    pub var_inv_gfx: u8,
    pub inv_gfx: [[u8; 32]; 6],
  }

  #[repr(C)]
  pub struct ItemDef {
    pub rarity: u8,
    pub level: u8,
    pub dmg: Range<u8>,
    pub dmg_throw: Range<u8>,
    pub dmg_2h: Range<u8>,
    pub melee_range: u8,
    pub str_bonus: u8,
    pub dex_bonus: u8,
    pub armor: Range<i32>,
    pub req_str: u8,
    pub req_dex: u8,
    pub absorbs: u8,
    pub inv_size: Size<u8>,
    pub block: u8,
    pub durability: u8,
    pub indestructible: u8,
    pub missile: u8,
    pub component: Component,
    pub armor_gfx: ByEqComponent<ArmorTy>,
    pub two_handed: u8,
    pub useable: u8,
    pub ty: Id8<ItemTy>,
    pub sub_ty: u8,
    pub sound: u8,
    pub unique: u8,
    pub quest: u8,
    pub transparent: u8,
    pub trans_tbl: u8,
    pub _pad0: [u8; 1],
    pub light_size: u8,
    pub belt: u8,
    pub auto_belt: u8,
    pub stackable: u8,
    pub spawnable: u8,
    pub missile_ty: Id16<Missile>,
    pub spell_icon: u8,
    pub dur_warning: u8,
    pub qnt_warning: u8,
    pub has_sockets: u8,
    pub socket_count: u8,
    pub transmogrify: u8,
    pub tmog_qnt: Range<u8>,
    pub hit_class: HitClass,
    pub multi_handed: u8,
    pub gem_apply_ty: u8,
    pub lvl_req: u8,
    pub norm_code: ItemCode,
    pub ultra_code: ItemCode,
    pub mlvl: u8,
    pub auto_prefix: i32,
    pub gamble_cost: i32,
    pub version: i16,
    pub transform: u8,
    pub inv_trans: u8,
    pub compact_save: u8,
    pub speed: i32,
    pub bitfield1: i32,
    pub cost: i32,
    pub stack_size: Range<i32>,
    pub spawn_stack: i32,
    pub _pad1: [u8; 4],
    pub gem_offset: i32,
    pub code: ItemCode,
    pub alt_gfx: I32Code,
    pub uber_code: ItemCode,
    pub wclass: I32Code,
    pub wclass_2h: I32Code,
    pub _pad2: [u8; 16],
    pub tmog_ty: I32Code,
    pub name: [u8; 64],
    pub wname: [u16; 64],
    pub flippy_file: [u8; 32],
    pub inv_file: [u8; 32],
    pub uinv_file: [u8; 32],
    pub sinv_file: [u8; 32],
    pub better_gem: ItemCode,
    pub skip_name: u8,
    pub nameable: u8,
    pub vend_min: PerVendor,
    pub vend_max: PerVendor,
    pub vend_mmin: PerVendor,
    pub vend_mmax: PerVendor,
    pub vend_mlvl: PerVendor,
    pub nm_upg: ItemCode,
    pub hell_upg: ItemCode,
    pub can_sell_out: u8,
  }

  #[repr(C)]
  pub struct LvlDef {
    pub id: u8,
    pub pal: u8,
    pub act: u8,
    pub rain: u8,
    pub mud: u8,
    pub no_per: u8,
    pub is_inside: u8,
    pub draw_edges: u8,
    pub warp_dist: i32,
    pub mlvl: ByNgLvl<u8>,
    pub mon_density: i32,
    pub umon_spawn_count: Range<u8>,
    pub mon_wndr: u8,
    pub mon_spc_walk: u8,
    pub quest: u8,
    pub mon_count: u8,
    pub mons: [i32; 25],
    pub smons: [i32; 25],
    pub umon_count: u8,
    pub umons: [i32; 25],
    pub critters: [i32; 5],
    pub ca: [i32; 5],
    pub cd: [i32; 5],
    pub waypoint: u8,
    pub obj_groups: [u8; 8],
    pub obj_weights: [u8; 8],
    pub lvl_name: [u8; 40],
    pub lvl_warp: [u8; 40],
    pub entry_file: [u8; 40],
    pub wlvl_name: [u16; 40],
    pub wlvl_warp: [u16; 40],
    pub themes: i32,
    pub floor_filter: i32,
    pub blank_screen: i32,
    pub sound_env: u8,
  }

  #[repr(C)]
  pub struct LvlWarpDef {
    pub id: i32,
    pub select: ScreenRectS<i32, i32>,
    pub exit_walk: TilePos<i32>,
    pub offset: TilePos<i32>,
    pub lit_version: i32,
    pub tiles: i32,
    pub direction: [u8; 2],
  }

  #[repr(C)]
  pub struct MAffixDef {
    pub name: [u8; 32],
    pub display_name: StrId,
    pub version: i16,
    pub mods: [ItemMod; 3],
    pub spawnable: u8,
    pub _pad1: [u8; 1],
    pub transform_color: Color,
    pub lvl: i32,
    pub group: i32,
    pub max_lvl: i32,
    pub rare: u8,
    pub lvl_req: u8,
    pub class_specific: Pc,
    pub class: Pc,
    pub class_lvl_req: u8,
    pub item_tys: [Id8<ItemTy>; 7],
    pub not_item_tys: [Id8<ItemTy>; 5],
    pub freq: u8,
    pub div: i32,
    pub mul: i32,
    pub add: i32,
  }

  #[repr(C)]
  pub struct MissileDef {
    pub vel: u8,
    pub max_vel: u8,
    pub accel: i32,
    pub range: i32,
    pub lvl_range: i32,
    pub light_size: u8,
    pub flicker_size: u8,
    pub color: RgbColor,
    pub pre_vis_frames: u8,
    pub pre_collide_frames: u8,
    pub loop_anim: u8,
    pub cel_file: [u8; 64],
    pub anim_len: u8,
    pub start_frame: i32,
    pub sub_loop: u8,
    pub sub_start: u8,
    pub sub_stop: u8,
    pub collide_ty: u8,
    pub collision: u8,
    pub client_col: u8,
    pub collide_kill: u8,
    pub collide_friend: u8,
    pub last_collide: u8,
    pub can_destroy: u8,
    pub client_send: u8,
    pub collision_rate_limit: u8,
    pub collision_rate_frames: u8,
    pub size: u8,
    pub use_ar: u8,
    pub always_explode: u8,
    pub is_explosion: u8,
    pub can_slow: u8,
    pub trigger_target_effects: u8,
    pub trigger_recovery: u8,
    pub knock_back: u8,
    pub trans: u8,
    pub qty: u8,
    pub inherit_pierce_chance: u8,
    pub params: [i32; 2],
    pub open: u8,
    pub beta: u8,
    pub special_setup: i32,
    pub skill: Skill,
    pub hit_shift: u8,
    pub use_src_dmg: FixedI7,
    pub dmg: Range<i32>,
    pub dmg_lvl: AccByLvl3<i32>,
    pub el_ty: ElTy,
    pub el_dmg: Range<i32>,
    pub el_dmg_lvl: AccByLvl3<i32>,
    pub el_len: i32,
    pub el_len_lvl: AccByLvl3<i32>,
    pub _pad0: [u8; 4],
    pub hit_class: i32,
    pub direction_count: u8,
    pub anim_speed: u8,
    pub local_blood: u8,
  }

  #[repr(C)]
  pub struct NpcDef {
    pub name: [u8; 60],
    pub wname: [u16; 60],
    pub descriptor: [u8; 60],
    pub wdescriptor: [u16; 60],
    pub base_id: i32,
    pub spawned: u8,
    pub code: [u8; 5],
    pub min_hp: ByNgLvl<i32>,
    pub max_hp: ByNgLvl<i32>,
    pub no_map: u8,
    pub size: Size<i32>,
    pub height: u8,
    pub no_overlays: u8,
    pub overlay_height: u8,
    pub walk_speed: i32,
    pub run_speed: i32,
    pub _pad2: [u8; 8],
    pub armor: ByNgLvl<i32>,
    pub xp: ByNgLvl<i32>,
    pub lvl: ByNgLvl<u8>,
    pub can_steal_from: u8,
    pub cold_effect: u8,
    pub melee_range: u8,
    pub rarity: u8,
    pub min_grp: u8,
    pub max_grp: u8,
    pub used_components: ByComponent<u8>,
    pub component_count: u8,
    pub base_w: I32Code,
    pub ai_params: [u8; 5],
    pub used_modes: ByNpcMode<u8>,
    pub el_mode: NpcMode,
    pub el_ty: ElTy,
    pub el_chance_pct: u8,
    pub el_dmg: Range<i32>,
    pub el_len_frames: u8,
    pub missile_a1: Missile,
    pub missile_a2: Missile,
    pub missile_s1: Missile,
    pub missile_s2: Missile,
    pub missile_s3: Missile,
    pub missile_s4: Missile,
    pub missile_c: Missile,
    pub missile_sq: Missile,
    pub a1_move: u8,
    pub a1_min_dmg: ByNgLvl<i32>,
    pub a1_max_dmg: ByNgLvl<i32>,
    pub a1_ar: ByNgLvl<i32>,
    pub a2_move: u8,
    pub a2_min_dmg: ByNgLvl<i32>,
    pub a2_max_dmg: ByNgLvl<i32>,
    pub a2_ar: ByNgLvl<i32>,
    pub s1_move: u8,
    pub s1_min_dmg: ByNgLvl<i32>,
    pub s1_max_dmg: ByNgLvl<i32>,
    pub s1_ar: ByNgLvl<i32>,
    pub s2_move: u8,
    pub s3_move: u8,
    pub s4_move: u8,
    pub block_chance: u8,
    pub cmove: u8,
    pub is_ally: u8,
    pub is_melee: u8,
    pub has_hover_life: u8,
    pub has_hover_name: u8,
    pub never_select: u8,
    pub can_select_corpse: u8,
    pub is_attackable: u8,
    pub ignore_pets: u8,
    pub is_npc: u8,
    pub is_critter: u8,
    pub in_town: u8,
    pub blood_ty: u8,
    pub has_shadow: u8,
    pub light_size: u8,
    pub no_unique_shift: u8,
    pub composite_death: u8,
    pub skills: [Skill; 5],
    pub skill_seqs: [u8; 5],
    pub skill_lvls: [u8; 5],
    pub light_color: RgbColor,
    pub dmg_resist: ByNgLvl<u8>,
    pub mdmg_resist: ByNgLvl<u8>,
    pub fire_resist: ByNgLvl<u8>,
    pub light_resist: ByNgLvl<u8>,
    pub cold_resist: ByNgLvl<u8>,
    pub poison_resist: ByNgLvl<u8>,
    pub hp_regen: FixedI12,
    pub is_low_undead: u8,
    pub is_high_undead: u8,
    pub is_demon: u8,
    pub is_magic_using: u8,
    pub is_large: u8,
    pub is_small: u8,
    pub is_flying: u8,
    pub can_open_doors: u8,
    pub is_boss: u8,
    pub spawn_ty: NpcSpawnTy,
    pub pix_height: u8,
    pub can_interact: u8,
    pub spawn_components: u8,
    pub is_soft: u8,
    pub heart: I32Code,
    pub body_part: I32Code,
    pub drop_sets: ByNgLvl<[DropSet; 4]>,
    pub spawn_pct_bonus: u8,
    pub can_die: u8,
    pub can_change_align: u8,
    pub is_saved: u8,
    pub no_quest_count: u8,
    pub hit_class: HitClass,
    pub spl_end_death: u8,
    pub spl_get_mode_chart: u8,
    pub spl_end_generic: u8,
    pub spl_client_end: u8,
    pub corpse_collision: u8,
    pub corpse_unwalkable: u8,
    pub blood_local: u8,
    pub does_dmg_on_death: u8,
    pub no_gfx_hit_test: u8,
    pub hit_test_ul_pos: ScreenPos<i32>,
    pub hit_test_size: Size<u8>,
    pub automap_cel: i32,
    pub generic_spawn: u8,
    pub sparse_populate: u8,
    pub zoo: u8,
    pub object_collision: u8,
    pub inert: u8,
  }

  #[repr(C)]
  pub struct QItemDef {
    pub armor: u8,
    pub weapon: u8,
    pub shield: u8,
    pub scepter: u8,
    pub wand: u8,
    pub staff: u8,
    pub bow: u8,
    pub boots: u8,
    pub gloves: u8,
    pub belt: u8,
    pub mod_count: u8,
    pub mods: [ItemMod; 2],
    pub effects: [[u8; 32]; 2],
    pub display_effects: [StrId; 2],
  }

  #[repr(C)]
  pub struct RAffixDef {
    pub _pad0: [u8; 12],
    pub display_name: StrId,
    pub version: i16,
    pub item_tys: [Id8<ItemTy>; 7],
    pub not_item_tys: [Id8<ItemTy>; 4],
    pub name: [u8; 32],
  }

  #[repr(C)]
  pub struct RecipeDef {
    pub enabled: u8,
    pub min_ng_lvl: u8,
    pub start_day: u8,
    pub stop_day: u8,
    pub weekday: u8,
    pub class: Pc,
    pub input_count: u8,
    pub expansion: u8,
    pub tys_in: [CubeTy; 6],
    pub codes_in: [I32Code; 6],
    pub counts_in: [u8; 6],
    pub mods_in: [CubeMod; 6],
    pub params_in: [[u8; 6]; 2],
    pub sockets_in: [u8; 6],
    pub gems_in: [[Id8<ItemTy>; 6]; 6],
    pub func: u8,
    pub outputs: [u8; 2],
    pub codes_out: [I32Code; 2],
    pub uses_out: [u8; 2],
    pub mods_out: [u8; 2],
    pub _pad0: [u8; 8],
    pub fixed_lvl_out: [u8; 2],
    pub plvl_pct_out: [u8; 2],
    pub ilvl_pct_out: [u8; 2],
    pub pmods_out: [[CubeMod; 2]; 2],
    pub psockets_out: [u8; 2],
    pub _pad1: [u8; 8],
    pub mods2_out: [[Prop; 5]; 2],
    pub mod_chances_out: [[i32; 5]; 2],
    pub mod_params_out: [[i32; 5]; 2],
    pub mod_min_values_out: [[i32; 5]; 2],
    pub mod_max_values_out: [[i32; 5]; 2],
  }

  #[repr(C)]
  pub struct RuneWordDef {
    pub name: [u8; 64],
    pub rune_name: [u8; 64],
    pub complete: u8,
    pub server: u8,
    pub _pad0: [u8; 4],
    pub item_tys: [Id8<ItemTy>; 6],
    pub not_item_tys: [Id8<ItemTy>; 3],
    pub runes: [Item; 6],
    pub mods: [ItemMod; 6],
  }

  #[repr(C)]
  pub struct SetItem {
    pub item: ItemCode,
    pub _pad0: [u8; 4],
    pub rarity: i32,
    pub lvl_req: u8,
    pub cost_mult: i32,
    pub cost_add: i32,
    pub add: u8,
    pub suffix: [u8; 32],
  }

  #[repr(C)]
  pub struct SetDef {
    pub name: [u8; 96],
    pub version: i16,
    pub display_name: [u8; 2],
    pub item_count: u8,
    pub _pad1: [u8; 32],
    pub transform: u8,
    pub transform_color: u8,
    pub lvl: i32,
    pub items: [SetItem; 6],
    pub item_mods: [[ItemMod; 7]; 6],
    pub part_set_mods: [ItemMod; 4],
    pub full_set_mods: [ItemMod; 6],
  }

  #[repr(C)]
  pub struct SkillDef {
    pub _pad0: [u8; 4],
    pub name: [u8; 16],
    pub pc_class: Pc,
    pub npc_only: i32,
    pub enhanceable: i32,
    pub cost_mult: i32,
    pub cost_add: i32,
    pub class_req: i32,
    pub attack_rank: u8,
    pub req_item_tys: [I32Code; 6],
    pub anim: [u8; 8],
    pub npc_anim: [u8; 8],
    pub _pad2: [u8; 8],
    pub seq_num: u8,
    pub durability: u8,
    pub shiver: u8,
    pub use_ar: i32,
    pub line_of_sight: u8,
    pub item_effect: i32,
    pub targetable_only: i32,
    pub search_enemy_xy: i32,
    pub search_monster_near: i32,
    pub select_corpse: i32,
    pub search_open_xy: i32,
    pub target_pet: u8,
    pub target_ally: u8,
    pub range: [u8; 8],
    pub _pad3: [u8; 6],
    pub attack_no_mana: i32,
    pub req_lvl: u8,
    pub req_str: u8,
    pub req_dex: u8,
    pub req_int: u8,
    pub req_vit: u8,
    pub req_skills: [Skill; 3],
    pub caster_state: State,
    pub victim_state: State,
    pub isaura: u8,
    pub _pad10: [u8; 15],
    pub states: [i32; 3],
    pub delay: i32,
    pub skill_page: u8,
    pub skill_row: u8,
    pub skill_column: u8,
    pub icon_cel: u8,
    pub left_skl: u8,
    pub mana_shift: i32,
    pub mana: i32,
    pub lvl_mana: i32,
    pub interrupt: u8,
    pub in_town: u8,
    pub periodic: u8,
    pub finishing: u8,
    pub passive: u8,
    pub params: [i32; 6],
    pub in_game: i32,
    pub open: i32,
    pub beta: i32,
    pub _pad11: [u8; 12],
    pub ar: i32,
    pub lvl_ar: i32,
    pub hit_shift: u8,
    pub use_src_dmg: u8,
    pub dmg: Range<i32>,
    pub dmg_lvl: AccByLvl3<i32>,
    pub el_ty: ElTy,
    pub el_dmg: Range<i32>,
    pub el_dmg_lvl: AccByLvl3<i32>,
    pub el_len: i32,
    pub el_len_lvl: AccByLvl3<i32>,
  }

  #[repr(C)]
  pub struct UItemDef {
    pub code: I32Code,
    pub version: i16,
    pub name: [u8; 32],
    pub display_name: StrId,
    pub beta: u8,
    pub transform: u8,
    pub inv_transform: u8,
    pub transform_color: u8,
    pub lvl: i32,
    pub lvl_req: u8,
    pub cost_mult: i32,
    pub cost_add: i32,
    pub completed: u8,
    pub rarity: i32,
    pub mods: [ItemMod; 10],
  }

  #[repr(C)]
  pub struct UMonDef {
    pub name: [u8; 60],
    pub wname: [u16; 60],
    pub class: i32,
    pub mods: [i32; 3],
    pub min_grp: i32,
    pub max_grp: i32,
    pub auto_pos: i32,
    pub eclass: i32,
    pub stacks: i32,
  }

  #[repr(C)]
  pub struct UNameDef {
    pub name: [u8; 60],
    pub wname: [u16; 60],
    pub mon_tys: [u8; 36],
    pub _pad1: [u8; 540],
  }

  #[repr(C)]
  pub struct XpReqDef {
    pub by_pc: [i32; 7],
  }
}
